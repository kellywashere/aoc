Note: the number of presents each elf has is irrelevent, ony whether that nr is zero of non-zero.

Example:
1 2 3 4 5 6 7 8 9 10 11 12 <-- before we start, 1 has first turn
1   3   5   7   9    11    <-- after 1 round, 1 has next turn
1       5       9          <-- after 2 rounds, 1 has next turn
1               9          <-- after 3 rounds, 9 has next turn (!)
                9          <-- 9 wins

We describe the set of still remaining nrs as a:s:b
where a is the lowest nr in the set, b is the highest nr in the set
and s the spacing between the nrs
So: set is geven by: x is element of a + k*s, where a <= x <= b
and k an integer.

A round stops when we would otherwise wrap around the circle, either
for grabbing a gift, or passing the turn to the next one. Player t has
the next turn. t is either equal to the lowest or the highest value
player.

Before we start, we have x = 1:1:nmax (nmax the input of the puzzle), and t = 1.
a(1) = 1
s(1) = 1
b(1) = nmax
t(1) = 1

a(n): lowest valued player before round n
s(n): step size between nrs before round n
b(n): highest valued player before round n
t(n): player that starts round n (either a(n) or b(n))

After round 1 (so before round 2) we have:
1:2:b(2), where b(2) is the largest value of x = 1 + 2*k s.t. x <= b(1)
(or in other words: the largest odd nr in the original set).
If b(1) > b(2), apparently b(1) got eliminated in round 1 by player b(2),
who apparently just has had his turn. So if b(1) > b(2), t(2) = a(2).
If b(1) == b(2), t(2) = b(2) for similar reason.

Generalizing:
Before round n we have x = a(n):s(n):b(n)
Case 1: t(n) == a(n):
	a(n + 1) = a(n)
	s(n + 1) = 2 * s(n)
	b(n + 1) = a(n + 1) + k*s(n + 1) <= b(n)  (maximize k)
	So: k <= floor( (b(n) - a(n+1))/s(n+1) )
	b(n + 1) = a(n + 1) * floor( (b(n) - a(n+1))/s(n+1) ) * s(n + 1)
Case 2: t(n) = b(n)
	a(n + 1) = a(n) + s(n)   (next player after a(n))
	s(n + 1) = 2 * s(n)
	b(n + 1) = a(n + 1) + k*s(n + 1) <= b(n)  (maximize k)
	So: k <= floor( (b(n) - a(n+1))/s(n+1) )
	b(n + 1) = a(n + 1) * floor( (b(n) - a(n+1))/s(n+1) ) * s(n + 1)
Only difference is a(n + 1)

Concerning t(n + 1):
if b(n) > b(n + 1) then t(n + 1) = a(n + 1)
otherwise t(n + 1) = b(n + 1)

We keep running this recurrence until b(n) == a(n)

Post-mortem 19A:
Turns out, this is a famous problem, called the Josephus problem.
Numberphile has a video on it which explains how to solve this puzzle.
For 19B, we are going to use an analogues approach.

19B:
There is a clear pattern in the order elves are eliminated:
They are eliminated in groups of 2 (adjecent), then 1 is skipped for
the next group of 2.

n: starting nr of elves
if n is odd:
eliminated elves: 1 + (n-1)/2, 3 + (n-1)/2, 4 + (n-1)/2, 6 + (n-1)/2, 7 + (n-1)/2 etc.
if n is even:
eliminated elves: 1 + n/2, 2 + n/2, 4 + n/2, 5 + n/2, 6 + n/2, 7 + n/2 etc

Observation: due to the pattern (of length three), there is now an easy pattern
when n is exactly a power of 3. In that case, elf with nr n wins !

For convenience, we renumber the elves in the range 0..(n-1) such that the
first elf to be eliminated gets number 0.
In case n is odd: we subtract (1 + (n-1)/2) from initial nr (mod n).
In case n is even: we subtract (1 + n/2) from initial nr (mod n)
The elves are split in groups of 3. If initial nr of elves is odd (then also
the nr of groups of 3 odd), elves are eliminated in order: 0,2,  3,5,  6,8,
etc. If n is even, it goes 0,1,  3,4,  6,7 etc.

It is straightworward to show that in case n = 3^k (which is odd), the winning
elf is the "middle" one. This elf has nr (n-1)/2 after renumbering. Before
renumbering this was (n-1)/2 + (1+(n-1)/2) = 1 + (n-1) = n.

If initial nr of elves is not equal to 3^k, we find largest integer k for which 3^k < n.
Call m = n - 3^k. If m elves are eliminated, we are left with 3^k elves, so winner is known.

CASE 1: n odd --> m is even
Again renumbering as before (first eliminated is nr 0), and grouping by 3, the
1st and 3rd member of the first m/2 groups are eliminated before we have a
total of 3^k elves left.
Next elf to be eliminated is 3*m/2 (according to renumbering).
We then have to count (3^k-1)/2 elves "further" to find the winner, skipping
already eliminated elves. 

Case 1a: 3*m/2 + (3^k-1)/2 < n (winning elf is to the right of 3m/2)
n < 2*3^k + 1
In that case winner is (3*n-1)/2 - 3^k (new numbering)
Original numbering: (3*n-1)/2 - 3^k + (1 + (n-1)/2) (mod n) which simplifies
to winner = 2*n-3^k (mod n) = n - 3^k

Case 2a: 3*m/2 + (3^k-1)/2 >= n (winning elf is in one of first m/2 groups)
n >= 2*3^k + 1
Winner (original numbering) = 2*n - 3*3^k


CASE 2: n even --> m is odd
Same final result as above
